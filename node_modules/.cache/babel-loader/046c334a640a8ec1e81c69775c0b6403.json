{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useContext } from \"react\";\nimport { AuthContext } from \"contexts/AuthContext\";\nimport createApiInstance from \"api/api\";\nconst useUserInfo = () => {\n  _s();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [userInfo, setUserInfo] = useState([]);\n  const apiInstance = createApiInstance(token);\n  useEffect(() => {\n    apiInstance.get(\"/auth/userinfo\").then(response => {\n      if (response.data.userName && Array.isArray(response.data.roles)) {\n        // Format the response into an array of a single object\n        const formattedData = [{\n          username: response.data.userName,\n          roles: response.data.roles\n        }];\n        setUserInfo(formattedData);\n      } else {\n        console.error(\"Invalid response format: \", response.data);\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return userInfo;\n};\n_s(useUserInfo, \"4Yku+NedLv0P4SM5KvhU9Cs8WoU=\");\nexport default useUserInfo;","map":{"version":3,"names":["useEffect","useState","useContext","AuthContext","createApiInstance","useUserInfo","_s","token","userInfo","setUserInfo","apiInstance","get","then","response","data","userName","Array","isArray","roles","formattedData","username","console","error","catch"],"sources":["D:/notus/notus-react/src/api/useUserInfo.js"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\r\nimport { AuthContext } from \"contexts/AuthContext\";\r\nimport createApiInstance from \"api/api\";\r\n\r\nconst useUserInfo = () => {\r\n  const { token } = useContext(AuthContext);\r\n  const [userInfo, setUserInfo] = useState([]);\r\n  const apiInstance = createApiInstance(token);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    apiInstance\r\n      .get(\"/auth/userinfo\")\r\n      .then((response) => {\r\n        if (response.data.userName && Array.isArray(response.data.roles)) {\r\n          // Format the response into an array of a single object\r\n          const formattedData = [\r\n            {\r\n              username: response.data.userName,\r\n              roles: response.data.roles,\r\n            },\r\n          ];\r\n          setUserInfo(formattedData);\r\n        } else {\r\n          console.error(\"Invalid response format: \", response.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n  return userInfo;\r\n\r\n\r\n  \r\n};\r\n\r\nexport default useUserInfo;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACvD,SAASC,WAAW,QAAQ,sBAAsB;AAClD,OAAOC,iBAAiB,MAAM,SAAS;AAEvC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAM,CAAC,GAAGL,UAAU,CAACC,WAAW,CAAC;EACzC,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMS,WAAW,GAAGN,iBAAiB,CAACG,KAAK,CAAC;EAI5CP,SAAS,CAAC,MAAM;IACdU,WAAW,CACRC,GAAG,CAAC,gBAAgB,CAAC,CACrBC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,IAAI,CAACC,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACC,IAAI,CAACI,KAAK,CAAC,EAAE;QAChE;QACA,MAAMC,aAAa,GAAG,CACpB;UACEC,QAAQ,EAAEP,QAAQ,CAACC,IAAI,CAACC,QAAQ;UAChCG,KAAK,EAAEL,QAAQ,CAACC,IAAI,CAACI;QACvB,CAAC,CACF;QACDT,WAAW,CAACU,aAAa,CAAC;MAC5B,CAAC,MAAM;QACLE,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAET,QAAQ,CAACC,IAAI,CAAC;MAC3D;IACF,CAAC,CAAC,CACDS,KAAK,CAAED,KAAK,IAAK;MAChBD,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACN,OAAOd,QAAQ;AAIjB,CAAC;AAACF,EAAA,CAhCID,WAAW;AAkCjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module"}