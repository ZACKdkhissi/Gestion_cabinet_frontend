{"ast":null,"code":"var _jsxFileName = \"D:\\\\notus1\\\\notus-react\\\\src\\\\components\\\\Cards\\\\CardCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { format, addDays, startOfMonth, endOfMonth, getDay, dateFns } from 'date-fns';\nimport Modal from 'react-modal';\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  //const [selectedDate, setSelectedDate] = useState(null);\n  //  const [showForm, setShowForm] = useState(false);\n\n  const firstDayOfMonth = startOfMonth(currentDate);\n  const lastDayOfMonth = endOfMonth(currentDate);\n  const handlePrevMonth = () => {\n    setCurrentDate(addDays(firstDayOfMonth, -1)); // Change to your logic for previous month\n  };\n\n  const handleNextMonth = () => {\n    setCurrentDate(addDays(lastDayOfMonth, 1)); // Change to your logic for next month\n  };\n\n  const handleDayClick = date => {\n    setSelectedDate(date);\n    setShowForm(true);\n  };\n  const handleCloseForm = () => {\n    setShowForm(false);\n  };\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    // Here, you can implement the logic to send the appointment details to the backend\n    console.log('Appointment details:', selectedDate, e.target.patientName.value);\n    setShowForm(false);\n  };\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  // Get the day of the week for the first day of the month\n  const firstDayOfWeek = getDay(firstDayOfMonth);\n\n  // Calculate the number of days in the month\n  const numberOfDaysInMonth = lastDayOfMonth.getDate();\n\n  // Calculate the number of weeks needed to display the entire month\n  const numberOfWeeks = Math.ceil((numberOfDaysInMonth + firstDayOfWeek) / 7);\n\n  // Create an array to represent the calendar weeks\n  const calendarWeeks = [];\n  let currentWeek = [];\n  let loopDate = firstDayOfMonth;\n\n  // Add empty cells for the days before the first day of the month\n  for (let i = 0; i < firstDayOfWeek; i++) {\n    currentWeek.push(null);\n  }\n\n  // Iterate through the days of the month to create the calendar weeks\n  for (let week = 0; week < numberOfWeeks; week++) {\n    for (let day = 0; day < 7; day++) {\n      if (loopDate <= lastDayOfMonth) {\n        currentWeek.push(loopDate);\n        loopDate = addDays(loopDate, 1);\n      } else {\n        currentWeek.push(null);\n      }\n    }\n    calendarWeeks.push(currentWeek);\n    currentWeek = [];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: \"Previous Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: format(firstDayOfMonth, 'MMMM yyyy')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: \"Next Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"calendar-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: dayNames.map(dayName => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: dayName\n          }, dayName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: calendarWeeks.map((week, weekIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: week.map((day, dayIndex) => {\n            if (day === null) {\n              return /*#__PURE__*/_jsxDEV(\"td\", {}, dayIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 24\n              }, this); // Empty cell for days before or after the current month\n            }\n\n            const dayNumber = format(day, 'd');\n            const isCurrentMonth = day.getMonth() === firstDayOfMonth.getMonth();\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: isCurrentMonth ? 'current-month' : 'other-month',\n              onClick: () => isCurrentMonth ? handleDayClick(day) : null,\n              children: dayNumber\n            }, dayIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this);\n          })\n        }, weekIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showForm,\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmitForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(CardCalendar, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = CardCalendar;\nexport default CardCalendar;\nvar _c;\n$RefreshReg$(_c, \"CardCalendar\");","map":{"version":3,"names":["React","useState","format","addDays","startOfMonth","endOfMonth","getDay","dateFns","Modal","jsxDEV","_jsxDEV","CardCalendar","_s","currentDate","setCurrentDate","Date","firstDayOfMonth","lastDayOfMonth","handlePrevMonth","handleNextMonth","handleDayClick","date","setSelectedDate","setShowForm","handleCloseForm","handleSubmitForm","e","preventDefault","console","log","selectedDate","target","patientName","value","dayNames","firstDayOfWeek","numberOfDaysInMonth","getDate","numberOfWeeks","Math","ceil","calendarWeeks","currentWeek","loopDate","i","push","week","day","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","dayName","weekIndex","dayIndex","dayNumber","isCurrentMonth","getMonth","isOpen","showForm","onSubmit","_c","$RefreshReg$"],"sources":["D:/notus1/notus-react/src/components/Cards/CardCalendar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { format, addDays, startOfMonth, endOfMonth, getDay, dateFns } from 'date-fns';\r\nimport Modal from 'react-modal';\r\nimport \"./Card.css\"\r\n\r\nconst CardCalendar = () => {\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    //const [selectedDate, setSelectedDate] = useState(null);\r\n  //  const [showForm, setShowForm] = useState(false);\r\n  \r\n    const firstDayOfMonth = startOfMonth(currentDate);\r\n    const lastDayOfMonth = endOfMonth(currentDate);\r\n  \r\n    const handlePrevMonth = () => {\r\n      setCurrentDate(addDays(firstDayOfMonth, -1)); // Change to your logic for previous month\r\n    };\r\n  \r\n    const handleNextMonth = () => {\r\n      setCurrentDate(addDays(lastDayOfMonth, 1)); // Change to your logic for next month\r\n    };\r\n  \r\n    const handleDayClick = (date) => {\r\n      setSelectedDate(date);\r\n      setShowForm(true);\r\n    };\r\n  \r\n    const handleCloseForm = () => {\r\n      setShowForm(false);\r\n    };\r\n  \r\n    const handleSubmitForm = (e) => {\r\n      e.preventDefault();\r\n      // Here, you can implement the logic to send the appointment details to the backend\r\n      console.log('Appointment details:', selectedDate, e.target.patientName.value);\r\n      setShowForm(false);\r\n    };\r\n  \r\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  \r\n    // Get the day of the week for the first day of the month\r\n    const firstDayOfWeek = getDay(firstDayOfMonth);\r\n  \r\n    // Calculate the number of days in the month\r\n    const numberOfDaysInMonth = lastDayOfMonth.getDate();\r\n  \r\n    // Calculate the number of weeks needed to display the entire month\r\n    const numberOfWeeks = Math.ceil((numberOfDaysInMonth + firstDayOfWeek) / 7);\r\n  \r\n    // Create an array to represent the calendar weeks\r\n    const calendarWeeks = [];\r\n    let currentWeek = [];\r\n    let loopDate = firstDayOfMonth;\r\n  \r\n    // Add empty cells for the days before the first day of the month\r\n    for (let i = 0; i < firstDayOfWeek; i++) {\r\n      currentWeek.push(null);\r\n    }\r\n  \r\n    // Iterate through the days of the month to create the calendar weeks\r\n    for (let week = 0; week < numberOfWeeks; week++) {\r\n      for (let day = 0; day < 7; day++) {\r\n        if (loopDate <= lastDayOfMonth) {\r\n          currentWeek.push(loopDate);\r\n          loopDate = addDays(loopDate, 1);\r\n        } else {\r\n          currentWeek.push(null);\r\n        }\r\n      }\r\n      calendarWeeks.push(currentWeek);\r\n      currentWeek = [];\r\n    }\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n    <div className=\"calendar-header\">\r\n      <button onClick={handlePrevMonth}>Previous Month</button>\r\n      <span>{format(firstDayOfMonth, 'MMMM yyyy')}</span>\r\n      <button onClick={handleNextMonth}>Next Month</button>\r\n    </div>\r\n    <table className=\"calendar-table\">\r\n      <thead>\r\n        <tr>\r\n          {dayNames.map((dayName) => (\r\n            <th key={dayName}>{dayName}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {calendarWeeks.map((week, weekIndex) => (\r\n          <tr key={weekIndex}>\r\n            {week.map((day, dayIndex) => {\r\n              if (day === null) {\r\n                return <td key={dayIndex}></td>; // Empty cell for days before or after the current month\r\n              }\r\n\r\n              const dayNumber = format(day, 'd');\r\n              const isCurrentMonth = day.getMonth() === firstDayOfMonth.getMonth();\r\n              return (\r\n                <td\r\n                  key={dayIndex}\r\n                  className={isCurrentMonth ? 'current-month' : 'other-month'}\r\n                  onClick={() => (isCurrentMonth ? handleDayClick(day) : null)}\r\n                >\r\n                  {dayNumber}\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    <Modal isOpen={showForm} className=\"modal\">\r\n      <form onSubmit={handleSubmitForm}>\r\n        {/* ... (rest of the code remains the same) */}\r\n      </form>\r\n    </Modal>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default CardCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}