{"ast":null,"code":"var _jsxFileName = \"D:\\\\notus1\\\\notus-react\\\\src\\\\components\\\\Cards\\\\CardCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { format, addDays, startOfMonth, endOfMonth, eachDayOfInterval, getDay, startOfWeek, endOfWeek } from 'date-fns';\nimport Modal from 'react-modal';\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const firstDayOfMonth = startOfMonth(currentDate);\n  const lastDayOfMonth = endOfMonth(currentDate);\n  const startDayOfCalendar = startOfWeek(firstDayOfMonth, {\n    weekStartsOn: 1\n  });\n  const endDayOfCalendar = endOfWeek(lastDayOfMonth, {\n    weekStartsOn: 1\n  });\n  const daysInCalendar = eachDayOfInterval({\n    start: startDayOfCalendar,\n    end: endDayOfCalendar\n  });\n  const handlePrevMonth = () => {\n    setCurrentDate(addDays(firstDayOfMonth, -1)); // Change to your logic for previous month\n  };\n\n  const handleNextMonth = () => {\n    setCurrentDate(addDays(lastDayOfMonth, 1)); // Change to your logic for next month\n  };\n\n  const handleDayClick = date => {\n    setSelectedDate(date);\n    setShowForm(true);\n  };\n  const handleCloseForm = () => {\n    setShowForm(false);\n  };\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    // Here, you can implement the logic to send the appointment details to the backend\n    console.log('Appointment details:', selectedDate, e.target.patientName.value);\n    setShowForm(false);\n  };\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: \"Previous Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: format(firstDayOfMonth, 'MMMM yyyy')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: \"Next Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"calendar-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: dayNames.map(dayName => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: dayName\n          }, dayName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: calendarWeeks.map((week, weekIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: dayNames.map((_, dayIndex) => {\n            const day = week[dayIndex];\n            const dayNumber = day ? format(day, 'd') : '';\n            const isCurrentMonth = day && day.getMonth() === firstDayOfMonth.getMonth();\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: isCurrentMonth ? 'current-month' : 'other-month',\n              onClick: () => isCurrentMonth ? handleDayClick(day) : null,\n              children: dayNumber\n            }, dayIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this);\n          })\n        }, weekIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showForm,\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Date: \", selectedDate && format(selectedDate, 'dd MMMM yyyy')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmitForm,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Patient Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"patientName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleCloseForm,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(CardCalendar, \"WnwfVg+xiKMba916AVlIeIQ/eRM=\");\n_c = CardCalendar;\nexport default CardCalendar;\nvar _c;\n$RefreshReg$(_c, \"CardCalendar\");","map":{"version":3,"names":["React","useState","format","addDays","startOfMonth","endOfMonth","eachDayOfInterval","getDay","startOfWeek","endOfWeek","Modal","jsxDEV","_jsxDEV","CardCalendar","_s","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","showForm","setShowForm","firstDayOfMonth","lastDayOfMonth","startDayOfCalendar","weekStartsOn","endDayOfCalendar","daysInCalendar","start","end","handlePrevMonth","handleNextMonth","handleDayClick","date","handleCloseForm","handleSubmitForm","e","preventDefault","console","log","target","patientName","value","dayNames","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","dayName","calendarWeeks","week","weekIndex","_","dayIndex","day","dayNumber","isCurrentMonth","getMonth","isOpen","onSubmit","type","name","_c","$RefreshReg$"],"sources":["D:/notus1/notus-react/src/components/Cards/CardCalendar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { format, addDays, startOfMonth, endOfMonth, eachDayOfInterval, getDay, startOfWeek, endOfWeek } from 'date-fns';\r\nimport Modal from 'react-modal';\r\nimport \"./Card.css\"\r\n\r\nconst CardCalendar = () => {\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [showForm, setShowForm] = useState(false);\r\n  \r\n    const firstDayOfMonth = startOfMonth(currentDate);\r\n    const lastDayOfMonth = endOfMonth(currentDate);\r\n    const startDayOfCalendar = startOfWeek(firstDayOfMonth, { weekStartsOn: 1 });\r\n    const endDayOfCalendar = endOfWeek(lastDayOfMonth, { weekStartsOn: 1 });\r\n    const daysInCalendar = eachDayOfInterval({ start: startDayOfCalendar, end: endDayOfCalendar });\r\n  \r\n    const handlePrevMonth = () => {\r\n      setCurrentDate(addDays(firstDayOfMonth, -1)); // Change to your logic for previous month\r\n    };\r\n  \r\n    const handleNextMonth = () => {\r\n      setCurrentDate(addDays(lastDayOfMonth, 1)); // Change to your logic for next month\r\n    };\r\n  \r\n    const handleDayClick = (date) => {\r\n      setSelectedDate(date);\r\n      setShowForm(true);\r\n    };\r\n  \r\n    const handleCloseForm = () => {\r\n      setShowForm(false);\r\n    };\r\n  \r\n    const handleSubmitForm = (e) => {\r\n      e.preventDefault();\r\n      // Here, you can implement the logic to send the appointment details to the backend\r\n      console.log('Appointment details:', selectedDate, e.target.patientName.value);\r\n      setShowForm(false);\r\n    };\r\n  \r\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n    <div className=\"calendar-header\">\r\n      <button onClick={handlePrevMonth}>Previous Month</button>\r\n      <span>{format(firstDayOfMonth, 'MMMM yyyy')}</span>\r\n      <button onClick={handleNextMonth}>Next Month</button>\r\n    </div>\r\n    <table className=\"calendar-table\">\r\n      <thead>\r\n        <tr>\r\n          {dayNames.map((dayName) => (\r\n            <th key={dayName}>{dayName}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {calendarWeeks.map((week, weekIndex) => (\r\n          <tr key={weekIndex}>\r\n            {dayNames.map((_, dayIndex) => {\r\n              const day = week[dayIndex];\r\n              const dayNumber = day ? format(day, 'd') : '';\r\n              const isCurrentMonth = day && day.getMonth() === firstDayOfMonth.getMonth();\r\n              return (\r\n                <td\r\n                  key={dayIndex}\r\n                  className={isCurrentMonth ? 'current-month' : 'other-month'}\r\n                  onClick={() => (isCurrentMonth ? handleDayClick(day) : null)}\r\n                >\r\n                  {dayNumber}\r\n                </td>\r\n              );\r\n            })}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    <Modal isOpen={showForm} className=\"modal\">\r\n        <h2>Add Appointment</h2>\r\n        <p>Date: {selectedDate && format(selectedDate, 'dd MMMM yyyy')}</p>\r\n        <form onSubmit={handleSubmitForm}>\r\n          <label>\r\n            Patient Name:\r\n            <input type=\"text\" name=\"patientName\" />\r\n          </label>\r\n          <button type=\"submit\">Add</button>\r\n          <button type=\"button\" onClick={handleCloseForm}>Cancel</button>\r\n        </form>\r\n      </Modal>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default CardCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}