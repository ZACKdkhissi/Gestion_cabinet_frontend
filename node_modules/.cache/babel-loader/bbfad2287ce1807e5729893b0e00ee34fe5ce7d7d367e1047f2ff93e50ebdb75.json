{"ast":null,"code":"var _jsxFileName = \"D:\\\\notus1\\\\notus-react\\\\src\\\\components\\\\Cards\\\\CardCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as dateFns from \"date-fns\";\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatOfDay = 'd';\nconst formatOfYear = 'yyy';\nconst formatOfMonth = 'MMM';\nconst formatOfWeek = 'eee';\nconst CardCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  //const [selectedDate, setSelectedDate] = useState(null);\n  //  const [showForm, setShowForm] = useState(false);\n\n  const firstDay = dateFns.startOfMonth(currentDate);\n  const lastDay = dateFns.lastDayOfMonth(currentDate);\n  const startDate = dateFns.startOfWeek(currentDate);\n  const endDate = dateFns.lastDayOfWeek(currentDate);\n  const totalDate = dateFns.eachDayOfInterval({\n    start: startDate,\n    end: endDate\n  });\n  console.log(totalDate);\n  const weeks = (dates => {\n    const weeks = [];\n    let week = [];\n    dates.forEach((date, index) => {\n      week.push(date);\n      if ((index + 1) % 7 === 0) {\n        weeks.push(week);\n        week = [];\n      }\n    });\n    return weeks;\n  })(totalDate);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Month year\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(7, 1fr)',\n        gap: '1rem'\n      },\n      children: [weeks.map((week, weekIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: week.map((date, dateIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: dateFns.format(date, formatOfWeek)\n        }, dateIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this))\n      }, weekIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)), totalDate.map((date, dateIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dateFns.format(date, formatOfDay)\n      }, dateIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(CardCalendar, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = CardCalendar;\nexport default CardCalendar;\nvar _c;\n$RefreshReg$(_c, \"CardCalendar\");","map":{"version":3,"names":["React","useState","dateFns","jsxDEV","_jsxDEV","formatOfDay","formatOfYear","formatOfMonth","formatOfWeek","CardCalendar","_s","currentDate","setCurrentDate","Date","firstDay","startOfMonth","lastDay","lastDayOfMonth","startDate","startOfWeek","endDate","lastDayOfWeek","totalDate","eachDayOfInterval","start","end","console","log","weeks","dates","week","forEach","date","index","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","gap","map","weekIndex","Fragment","dateIndex","format","_c","$RefreshReg$"],"sources":["D:/notus1/notus-react/src/components/Cards/CardCalendar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as dateFns from \"date-fns\"\r\nimport \"./Card.css\"\r\n\r\nconst formatOfDay = 'd';\r\nconst formatOfYear = 'yyy';\r\nconst formatOfMonth = 'MMM';\r\nconst formatOfWeek = 'eee';\r\n\r\n\r\nconst CardCalendar = () => {\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    //const [selectedDate, setSelectedDate] = useState(null);\r\n  //  const [showForm, setShowForm] = useState(false);\r\n  \r\n    const firstDay = dateFns.startOfMonth(currentDate);\r\n    const lastDay = dateFns.lastDayOfMonth(currentDate);\r\n\r\n    const startDate = dateFns.startOfWeek(currentDate);\r\n    const endDate = dateFns.lastDayOfWeek(currentDate);\r\n    \r\n    const totalDate = dateFns.eachDayOfInterval({start: startDate , end: endDate});\r\n    console.log(totalDate);\r\n\r\n    const weeks = (dates => {\r\n        const weeks = [];\r\n        let week = [];\r\n        dates.forEach((date, index) => {\r\n          week.push(date);\r\n          if ((index + 1) % 7 === 0) {\r\n            weeks.push(week);\r\n            week = [];\r\n          }\r\n        });\r\n        return weeks;\r\n      })(totalDate);\r\n\r\n\r\n  return (\r\n    <div className=\"\">\r\n        <div>Month year</div>\r\n        <div style={{display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: '1rem'}}>\r\n             {weeks.map((week, weekIndex) => (\r\n          <React.Fragment key={weekIndex}>\r\n            {week.map((date, dateIndex) => (\r\n              <span key={dateIndex}>{dateFns.format(date, formatOfWeek)}</span>\r\n            ))}\r\n          </React.Fragment>\r\n        ))}\r\n        {totalDate.map((date, dateIndex) => (\r\n          <span key={dateIndex}>{dateFns.format(date, formatOfDay)}</span>\r\n        ))}\r\n        </div>\r\n   \r\n  </div>\r\n  );\r\n};\r\n\r\nexport default CardCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}