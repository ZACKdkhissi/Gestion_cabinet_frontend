{"ast":null,"code":"var _jsxFileName = \"D:\\\\notus1\\\\notus-react\\\\src\\\\components\\\\Cards\\\\CardCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as dateFns from \"date-fns\";\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatOfDay = 'd';\nconst formatOfYear = 'yyy';\nconst formatOfMonth = 'MMM';\nconst formatOfWeek = 'eee';\nconst CardCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const firstDay = dateFns.startOfMonth(currentDate);\n  const lastDay = dateFns.lastDayOfMonth(currentDate);\n  const startDate = dateFns.startOfWeek(firstDay);\n  const endDate = dateFns.lastDayOfWeek(lastDay);\n  const totalDate = dateFns.eachDayOfInterval({\n    start: startDate,\n    end: endDate\n  });\n  const weeks = (dates => {\n    const weeks = [];\n    let week = [];\n    dates.forEach((date, index) => {\n      week.push(date);\n      if ((index + 1) % 7 === 0) {\n        weeks.push(week);\n        week = [];\n      }\n    });\n    return weeks;\n  })(totalDate);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Month year\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(7, 1fr)',\n        gap: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), weeks[0].map(date => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dateFns.format(date, formatOfWeek)\n      }, date.getTime(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)), weeks.map((week, weekIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Week \", weekIndex + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), week.map((date, dateIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: dateFns.format(date, formatOfDay)\n        }, dateIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this))]\n      }, weekIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(CardCalendar, \"jlRD8Xn8VFdQnzpYmYXrLX8M9Sw=\");\n_c = CardCalendar;\nexport default CardCalendar;\nvar _c;\n$RefreshReg$(_c, \"CardCalendar\");","map":{"version":3,"names":["React","useState","dateFns","jsxDEV","_jsxDEV","formatOfDay","formatOfYear","formatOfMonth","formatOfWeek","CardCalendar","_s","currentDate","setCurrentDate","Date","firstDay","startOfMonth","lastDay","lastDayOfMonth","startDate","startOfWeek","endDate","lastDayOfWeek","totalDate","eachDayOfInterval","start","end","weeks","dates","week","forEach","date","index","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","gap","map","format","getTime","weekIndex","Fragment","dateIndex","_c","$RefreshReg$"],"sources":["D:/notus1/notus-react/src/components/Cards/CardCalendar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as dateFns from \"date-fns\";\r\nimport \"./Card.css\";\r\n\r\nconst formatOfDay = 'd';\r\nconst formatOfYear = 'yyy';\r\nconst formatOfMonth = 'MMM';\r\nconst formatOfWeek = 'eee';\r\n\r\nconst CardCalendar = () => {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  const firstDay = dateFns.startOfMonth(currentDate);\r\n  const lastDay = dateFns.lastDayOfMonth(currentDate);\r\n\r\n  const startDate = dateFns.startOfWeek(firstDay);\r\n  const endDate = dateFns.lastDayOfWeek(lastDay);\r\n\r\n  const totalDate = dateFns.eachDayOfInterval({ start: startDate, end: endDate });\r\n\r\n  const weeks = (dates => {\r\n    const weeks = [];\r\n    let week = [];\r\n    dates.forEach((date, index) => {\r\n      week.push(date);\r\n      if ((index + 1) % 7 === 0) {\r\n        weeks.push(week);\r\n        week = [];\r\n      }\r\n    });\r\n    return weeks;\r\n  })(totalDate);\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <div>Month year</div>\r\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: '1rem' }}>\r\n        <span></span>\r\n        {weeks[0].map(date => (\r\n          <span key={date.getTime()}>{dateFns.format(date, formatOfWeek)}</span>\r\n        ))}\r\n        {weeks.map((week, weekIndex) => (\r\n          <React.Fragment key={weekIndex}>\r\n            <span>Week {weekIndex + 1}</span>\r\n            {week.map((date, dateIndex) => (\r\n              <span key={dateIndex}>{dateFns.format(date, formatOfDay)}</span>\r\n            ))}\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}