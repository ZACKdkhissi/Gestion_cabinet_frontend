{"ast":null,"code":"var _jsxFileName = \"D:\\\\notus1\\\\notus-react\\\\src\\\\components\\\\Cards\\\\CardCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { format, addDays, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';\nimport Modal from 'react-modal';\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const firstDayOfMonth = startOfMonth(currentDate);\n  const lastDayOfMonth = endOfMonth(currentDate);\n  const daysInMonth = eachDayOfInterval({\n    start: firstDayOfMonth,\n    end: lastDayOfMonth\n  });\n  const handlePrevMonth = () => {\n    setCurrentDate(addDays(firstDayOfMonth, -1)); // Change to your logic for previous month\n  };\n\n  const handleNextMonth = () => {\n    setCurrentDate(addDays(lastDayOfMonth, 1)); // Change to your logic for next month\n  };\n\n  const handleDayClick = date => {\n    setSelectedDate(date);\n    setShowForm(true);\n  };\n  const handleCloseForm = () => {\n    setShowForm(false);\n  };\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    // Here, you can implement the logic to send the appointment details to the backend\n    console.log('Appointment details:', selectedDate, e.target.patientName.value);\n    setShowForm(false);\n  };\n  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: \"Previous Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: format(currentDate, 'MMMM yyyy')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: \"Next Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"calendar-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: dayNames.map(dayName => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: dayName\n          }, dayName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: daysInMonth.map(day => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            onClick: () => handleDayClick(day),\n            children: format(day, 'd')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showForm,\n      className: \"modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(CardCalendar, \"WnwfVg+xiKMba916AVlIeIQ/eRM=\");\n_c = CardCalendar;\nexport default CardCalendar;\nvar _c;\n$RefreshReg$(_c, \"CardCalendar\");","map":{"version":3,"names":["React","useState","format","addDays","startOfMonth","endOfMonth","eachDayOfInterval","Modal","jsxDEV","_jsxDEV","CardCalendar","_s","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","showForm","setShowForm","firstDayOfMonth","lastDayOfMonth","daysInMonth","start","end","handlePrevMonth","handleNextMonth","handleDayClick","date","handleCloseForm","handleSubmitForm","e","preventDefault","console","log","target","patientName","value","dayNames","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","dayName","day","isOpen","_c","$RefreshReg$"],"sources":["D:/notus1/notus-react/src/components/Cards/CardCalendar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { format, addDays, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';\r\nimport Modal from 'react-modal';\r\nimport \"./Card.css\"\r\n\r\nconst CardCalendar = () => {\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n    const [showForm, setShowForm] = useState(false);\r\n  \r\n    const firstDayOfMonth = startOfMonth(currentDate);\r\n    const lastDayOfMonth = endOfMonth(currentDate);\r\n    const daysInMonth = eachDayOfInterval({ start: firstDayOfMonth, end: lastDayOfMonth });\r\n  \r\n    const handlePrevMonth = () => {\r\n      setCurrentDate(addDays(firstDayOfMonth, -1)); // Change to your logic for previous month\r\n    };\r\n  \r\n    const handleNextMonth = () => {\r\n      setCurrentDate(addDays(lastDayOfMonth, 1)); // Change to your logic for next month\r\n    };\r\n  \r\n    const handleDayClick = (date) => {\r\n      setSelectedDate(date);\r\n      setShowForm(true);\r\n    };\r\n  \r\n    const handleCloseForm = () => {\r\n      setShowForm(false);\r\n    };\r\n  \r\n    const handleSubmitForm = (e) => {\r\n      e.preventDefault();\r\n      // Here, you can implement the logic to send the appointment details to the backend\r\n      console.log('Appointment details:', selectedDate, e.target.patientName.value);\r\n      setShowForm(false);\r\n    };\r\n  \r\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  \r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n    <div className=\"calendar-header\">\r\n      <button onClick={handlePrevMonth}>Previous Month</button>\r\n      <span>{format(currentDate, 'MMMM yyyy')}</span>\r\n      <button onClick={handleNextMonth}>Next Month</button>\r\n    </div>\r\n    <table className=\"calendar-table\">\r\n      <thead>\r\n        <tr>\r\n          {dayNames.map((dayName) => (\r\n            <th key={dayName}>{dayName}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {/* Render the days of the month */}\r\n        {daysInMonth.map((day) => (\r\n          <tr key={day}>\r\n            <td onClick={() => handleDayClick(day)}>{format(day, 'd')}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n    <Modal isOpen={showForm} className=\"modal\">\r\n      {/* ... (the rest of the code) */}\r\n    </Modal>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default CardCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}