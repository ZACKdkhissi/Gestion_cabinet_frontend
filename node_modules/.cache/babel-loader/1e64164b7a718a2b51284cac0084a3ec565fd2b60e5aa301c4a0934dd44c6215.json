{"ast":null,"code":"var _jsxFileName = \"D:\\\\notus1\\\\notus-react\\\\src\\\\components\\\\Cards\\\\CardCalendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as dateFns from \"date-fns\";\nimport \"./Card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatOfDay = 'd';\nconst formatOfYear = 'yyyy';\nconst formatOfMonth = 'MMM';\nconst formatOfWeek = 'eee';\nconst Modal = ({\n  isOpen,\n  onClose\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `modal ${isOpen ? 'open' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClose,\n      children: \"Fermer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this);\n};\n_c = Modal;\nconst CardCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const firstDay = dateFns.startOfMonth(currentDate);\n  const lastDay = dateFns.lastDayOfMonth(currentDate);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const startDate = dateFns.startOfWeek(firstDay, {\n    weekStartsOn: 1\n  });\n  const endDate = dateFns.endOfWeek(lastDay, {\n    weekStartsOn: 1\n  });\n  const totalDate = dateFns.eachDayOfInterval({\n    start: startDate,\n    end: endDate\n  });\n  const weeks = [];\n  for (let i = 0; i < totalDate.length; i += 7) {\n    weeks.push(totalDate.slice(i, i + 7));\n  }\n  const handlePreviousMonth = () => {\n    setCurrentDate(dateFns.subMonths(currentDate, 1));\n  };\n  const handleNextMonth = () => {\n    setCurrentDate(dateFns.addMonths(currentDate, 1));\n  };\n  const handleDayClick = clickedDate => {\n    if (isSameMonth(clickedDate, currentDate)) {\n      setShowModal(true);\n      setSelectedDate(clickedDate);\n    }\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  const isSameMonth = (date1, date2) => dateFns.isSameMonth(date1, date2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"prev-button\",\n        onClick: handlePreviousMonth,\n        children: \"Pr\\xE9c\\xE9dent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"current-month\",\n        children: dateFns.format(currentDate, 'MMMM yyyy')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-button\",\n        onClick: handleNextMonth,\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(7, 1fr)',\n        gap: '1rem'\n      },\n      children: [weeks[0].map((date, dateIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dateFns.format(date, formatOfWeek)\n      }, dateIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)), weeks.map((week, weekIndex) => week.map((date, dateIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => handleDayClick(date),\n        className: `calendar-day ${!isSameMonth(date, currentDate) ? 'other-month-day' : ''}`,\n        children: dateFns.format(date, formatOfDay)\n      }, dateIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this)))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showModal,\n      onClose: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(CardCalendar, \"NPi6fTF4MZxd49Xfte5wKUtvpxU=\");\n_c2 = CardCalendar;\nexport default CardCalendar;\nvar _c, _c2;\n$RefreshReg$(_c, \"Modal\");\n$RefreshReg$(_c2, \"CardCalendar\");","map":{"version":3,"names":["React","useState","dateFns","jsxDEV","_jsxDEV","formatOfDay","formatOfYear","formatOfMonth","formatOfWeek","Modal","isOpen","onClose","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardCalendar","_s","currentDate","setCurrentDate","Date","firstDay","startOfMonth","lastDay","lastDayOfMonth","showModal","setShowModal","selectedDate","setSelectedDate","startDate","startOfWeek","weekStartsOn","endDate","endOfWeek","totalDate","eachDayOfInterval","start","end","weeks","i","length","push","slice","handlePreviousMonth","subMonths","handleNextMonth","addMonths","handleDayClick","clickedDate","isSameMonth","handleCloseModal","date1","date2","format","style","display","gridTemplateColumns","gap","map","date","dateIndex","week","weekIndex","_c2","$RefreshReg$"],"sources":["D:/notus1/notus-react/src/components/Cards/CardCalendar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as dateFns from \"date-fns\";\r\nimport \"./Card.css\";\r\n\r\nconst formatOfDay = 'd';\r\nconst formatOfYear = 'yyyy';\r\nconst formatOfMonth = 'MMM';\r\nconst formatOfWeek = 'eee';\r\n\r\nconst Modal = ({ isOpen, onClose }) => {\r\n    return (\r\n      <div className={`modal ${isOpen ? 'open' : ''}`}>\r\n        {/* Contenu de votre formulaire */}\r\n        <button onClick={onClose}>Fermer</button>\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst CardCalendar = () => {\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const firstDay = dateFns.startOfMonth(currentDate);\r\n    const lastDay = dateFns.lastDayOfMonth(currentDate);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n\r\n\r\n    const startDate = dateFns.startOfWeek(firstDay, { weekStartsOn: 1 });\r\n    const endDate = dateFns.endOfWeek(lastDay, { weekStartsOn: 1 });\r\n\r\n    const totalDate = dateFns.eachDayOfInterval({ start: startDate, end: endDate });\r\n\r\n    const weeks = [];\r\n    for (let i = 0; i < totalDate.length; i += 7) {\r\n        weeks.push(totalDate.slice(i, i + 7));\r\n    }\r\n\r\n    const handlePreviousMonth = () => {\r\n        setCurrentDate(dateFns.subMonths(currentDate, 1));\r\n    };\r\n\r\n    const handleNextMonth = () => {\r\n        setCurrentDate(dateFns.addMonths(currentDate, 1));\r\n    };\r\n\r\n    const handleDayClick = (clickedDate) => {\r\n        if (isSameMonth(clickedDate, currentDate)) {\r\n          setShowModal(true);\r\n          setSelectedDate(clickedDate);\r\n        }\r\n      };\r\n\r\n      const handleCloseModal = () => {\r\n        setShowModal(false);\r\n      };\r\n      \r\n\r\n    const isSameMonth = (date1, date2) =>\r\n  dateFns.isSameMonth(date1, date2);\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <div className=\"calendar-header\">\r\n                <button className=\"prev-button\" onClick={handlePreviousMonth}>Précédent</button>\r\n                <span className=\"current-month\">{dateFns.format(currentDate, 'MMMM yyyy')}</span>\r\n                <button className=\"next-button\" onClick={handleNextMonth}>Suivant</button>\r\n            </div>\r\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(7, 1fr)', gap: '1rem' }}>\r\n                {weeks[0].map((date, dateIndex) => (\r\n                    <span  key={dateIndex}  >{dateFns.format(date, formatOfWeek)}</span>\r\n                ))}\r\n                {weeks.map((week, weekIndex) => (\r\n                    week.map((date, dateIndex) => (\r\n                        <span\r\n                        onClick={() => handleDayClick(date)}\r\n\r\n                        key={dateIndex}\r\n                        className={`calendar-day ${\r\n                            !isSameMonth(date, currentDate) ? 'other-month-day' : ''\r\n                        }`}\r\n                        >\r\n                        {dateFns.format(date, formatOfDay)}\r\n                        </span>\r\n                    ))\r\n                ))}\r\n            </div>\r\n            {showModal && <Modal isOpen={showModal} onClose={handleCloseModal} />}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}